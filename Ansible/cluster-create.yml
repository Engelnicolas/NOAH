---
- name: Create NOAH Kubernetes Cluster
  hosts: local
  gather_facts: yes
  vars:
    cluster_name: "noah-cluster"
    verbose_mode: true  # Enable verbose output by default
    
  tasks:
    - name: "PREREQUISITE: Validate cluster is clean before creation"
      ansible.builtin.shell: |
        echo "=== VALIDATING CLEAN CLUSTER STATE ==="
        
        # Check for existing K3s processes
        if pgrep -f k3s >/dev/null 2>&1; then
          echo "ERROR: K3s processes are still running. Run 'python noah.py cluster destroy' first."
          exit 1
        fi
        
        # Check for existing K3s service
        if systemctl is-active k3s >/dev/null 2>&1; then
          echo "ERROR: K3s service is still active. Run 'python noah.py cluster destroy' first."
          exit 1
        fi
        
        # Check for existing kubectl context
        if kubectl cluster-info >/dev/null 2>&1; then
          echo "ERROR: Existing cluster is accessible. Run 'python noah.py cluster destroy' first."
          exit 1
        fi
        
        # Check for existing Helm releases
        if command -v helm >/dev/null 2>&1; then
          if helm list --all-namespaces -o json 2>/dev/null | jq -e '. | length > 0' >/dev/null; then
            echo "ERROR: Existing Helm releases found. Run 'python noah.py cluster destroy' first."
            exit 1
          fi
        fi
        
        # Check for existing NOAH data directories
        for dir in "/var/lib/rancher/k3s" "/etc/rancher/k3s" "/run/k3s"; do
          if [ -d "$dir" ]; then
            echo "ERROR: K3s data directory exists: $dir. Run 'python noah.py cluster destroy' first."
            exit 1
          fi
        done
        
        echo "✓ No existing cluster components found"
        echo "✓ System is clean and ready for cluster creation"
        echo "=== PREREQUISITE VALIDATION PASSED ==="
      ignore_errors: false
      changed_when: false

    - name: Ensure basic system packages are installed
      package:
        name: "{{ item }}"
        state: present
      loop:
        - age
        - python3
        - python3-pip
        - python3-venv
        - curl
        - git
      become: yes
      when: ansible_os_family == "Debian"

    - name: Check if kubectl is installed
      command: which kubectl
      register: kubectl_check
      failed_when: false
      changed_when: false

    - name: Check if helm is installed
      command: which helm
      register: helm_check
      failed_when: false
      changed_when: false

    - name: Check if sops is installed
      command: which sops
      register: sops_check
      failed_when: false
      changed_when: false

    - name: Display tool availability status
      debug:
        msg:
          - "kubectl available: {{ kubectl_check.rc == 0 }}"
          - "helm available: {{ helm_check.rc == 0 }}"
          - "sops available: {{ sops_check.rc == 0 }}"
          - "age available: {{ 'yes' if ansible_facts.packages is defined and 'age' in ansible_facts.packages else 'unknown' }}"

    - name: Check if virtual environment exists
      stat:
        path: /root/New/.venv
      register: venv_exists

    - name: Create Python virtual environment
      command: python3 -m venv .venv
      args:
        chdir: /root/New
      when: not venv_exists.stat.exists

    - name: Install Python dependencies from Scripts/requirements.txt
      shell: |
        ./.venv/bin/python -m pip install --upgrade pip
        ./.venv/bin/python -m pip install packaging
        ./.venv/bin/python -m pip install -r ./Scripts/requirements.txt
      args:
        chdir: /root/New
        creates: ./.venv/lib/python*/site-packages/click
      register: pip_install_result

    - name: Verify NOAH CLI functionality
      shell: |
        export PYTHONPATH=$(pwd):$PYTHONPATH
        ./.venv/bin/python noah.py --help
      args:
        chdir: /root/New
      register: noah_cli_test
      failed_when: noah_cli_test.rc != 0

    - name: Display NOAH CLI verification result
      debug:
        msg: "NOAH CLI is functional and ready for deployment"
      when: noah_cli_test.rc == 0

    - name: Create cluster namespaces
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Namespace
        state: present
      loop:
        - identity
        - cilium-system
      when: false  # Skip in test mode

    - name: Initialize Age encryption
      shell: |
        if [ ! -f ./Age/keys.txt ]; then
          mkdir -p ./Age
          age-keygen > ./Age/keys.txt
          chmod 600 ./Age/keys.txt
        fi
      args:
        chdir: /root/New
        creates: /root/New/Age/keys.txt

    - name: Extract Age public key
      shell: grep "public key:" ./Age/keys.txt | cut -d' ' -f4
      args:
        chdir: /root/New
      register: age_public_key
      changed_when: false

    - name: Create SOPS configuration
      copy:
        content: |
          creation_rules:
            - path_regex: .*\.enc\.yaml$
              age: {{ age_public_key.stdout }}
            - path_regex: .*\.enc\.json$
              age: {{ age_public_key.stdout }}
        dest: /root/New/.sops.yaml
        mode: '0644'

    - name: Generate self-signed CA certificate
      block:
        - name: Create certificate directory
          file:
            path: ./Certificates
            state: directory
            mode: '0755'

        - name: Generate CA private key with OpenSSL command
          shell: |
            if [ ! -f ./Certificates/ca.key ]; then
              openssl genrsa -out ./Certificates/ca.key 4096
              chmod 600 ./Certificates/ca.key
            fi
          args:
            creates: ./Certificates/ca.key

        - name: Generate self-signed CA certificate with OpenSSL command
          shell: |
            if [ ! -f ./Certificates/ca.crt ]; then
              openssl req -new -x509 -key ./Certificates/ca.key -sha256 -subj "/C=US/ST=CA/O=NOAH/CN=NOAH CA" -days 3650 -out ./Certificates/ca.crt
              chmod 644 ./Certificates/ca.crt
            fi
          args:
            creates: ./Certificates/ca.crt

    - name: Create ConfigMap for CA certificate
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: noah-ca-bundle
            namespace: identity
          data:
            ca-bundle.crt: "{{ lookup('file', './Certificates/ca-cert.pem') }}"
      when: false  # Skip in test mode

    - name: Display cluster creation summary
      debug:
        msg:
          - "Cluster {{ cluster_name }} initialized successfully"
          - "Python virtual environment: ./.venv created"
          - "NOAH dependencies installed from Scripts/requirements.txt"
          - "NOAH CLI verified and functional"
          - "Age public key: {{ age_public_key.stdout }}"
          - "Namespaces created: identity, cilium-system"
          - "CA certificate generated"
          - "Cluster ready for NOAH service deployment"

    - name: "FINAL VALIDATION: Run NOAH setup doctor for comprehensive prerequisite check"
      ansible.builtin.shell: |
        echo ""
        echo "=============================================="
        echo "    NOAH CLUSTER CREATION VALIDATION TEST    "
        echo "=============================================="
        echo ""
        echo "[VALIDATION] Running comprehensive NOAH environment check..."
        echo ""
        
        # Set the environment for NOAH CLI
        export PYTHONPATH=$(pwd):$PYTHONPATH
        
        # Run noah.py setup doctor and capture output
        if ./.venv/bin/python noah.py setup doctor; then
          echo ""
          echo "✅ NOAH setup doctor validation PASSED"
          doctor_status="PASS"
        else
          echo ""
          echo "❌ NOAH setup doctor validation FAILED"
          doctor_status="FAIL"
        fi
        
        echo ""
        echo "[VALIDATION] Additional cluster-specific checks..."
        
        # Check Age keys specifically
        if [ -f "./Age/keys.txt" ]; then
          echo "✅ Age encryption keys: PRESENT"
          age_status="PASS"
        else
          echo "❌ Age encryption keys: MISSING"
          age_status="FAIL"
        fi
        
        # Check SOPS configuration
        if [ -f "./.sops.yaml" ]; then
          echo "✅ SOPS configuration: PRESENT"
          sops_status="PASS"
        else
          echo "❌ SOPS configuration: MISSING"
          sops_status="FAIL"
        fi
        
        # Check TLS certificates
        if [ -f "./Certificates/ca.crt" ] && [ -f "./Certificates/ca.key" ]; then
          echo "✅ TLS certificates: PRESENT"
          certs_status="PASS"
        else
          echo "❌ TLS certificates: MISSING"
          certs_status="FAIL"
        fi
        
        # Check virtual environment
        if [ -d "./.venv" ] && [ -f "./.venv/bin/python" ]; then
          echo "✅ Python virtual environment: PRESENT"
          venv_status="PASS"
        else
          echo "❌ Python virtual environment: MISSING"
          venv_status="FAIL"
        fi
        
        # Check NOAH CLI functionality
        if ./.venv/bin/python noah.py --help >/dev/null 2>&1; then
          echo "✅ NOAH CLI functionality: WORKING"
          cli_status="PASS"
        else
          echo "❌ NOAH CLI functionality: BROKEN"
          cli_status="FAIL"
        fi
        
        # Check essential external tools
        tools_status="PASS"
        for tool in kubectl helm ansible age sops; do
          if command -v $tool >/dev/null 2>&1; then
            echo "✅ $tool: AVAILABLE"
          else
            echo "❌ $tool: MISSING"
            tools_status="FAIL"
          fi
        done
        
        # Check Python dependencies
        echo ""
        echo "[VALIDATION] Checking critical Python dependencies..."
        deps_status="PASS"
        critical_deps="click kubernetes ansible PyYAML python-dotenv requests"
        for dep in $critical_deps; do
          if ./.venv/bin/python -c "import $dep" >/dev/null 2>&1; then
            echo "✅ Python $dep: INSTALLED"
          else
            echo "❌ Python $dep: MISSING"
            deps_status="FAIL"
          fi
        done
        
        echo ""
        echo "=============================================="
        echo "           VALIDATION SUMMARY"
        echo "=============================================="
        
        # Count failures
        failures=0
        if [ "$doctor_status" = "FAIL" ]; then failures=$((failures + 1)); fi
        if [ "$age_status" = "FAIL" ]; then failures=$((failures + 1)); fi
        if [ "$sops_status" = "FAIL" ]; then failures=$((failures + 1)); fi
        if [ "$certs_status" = "FAIL" ]; then failures=$((failures + 1)); fi
        if [ "$venv_status" = "FAIL" ]; then failures=$((failures + 1)); fi
        if [ "$cli_status" = "FAIL" ]; then failures=$((failures + 1)); fi
        if [ "$tools_status" = "FAIL" ]; then failures=$((failures + 1)); fi
        if [ "$deps_status" = "FAIL" ]; then failures=$((failures + 1)); fi
        
        echo "Component Status Summary:"
        echo "├── NOAH Setup Doctor: $doctor_status"
        echo "├── Age Encryption Keys: $age_status"
        echo "├── SOPS Configuration: $sops_status" 
        echo "├── TLS Certificates: $certs_status"
        echo "├── Virtual Environment: $venv_status"
        echo "├── NOAH CLI: $cli_status"
        echo "├── External Tools: $tools_status"
        echo "└── Python Dependencies: $deps_status"
        echo ""
        
        if [ $failures -eq 0 ]; then
          echo "🎉 SUCCESS: All validation checks passed!"
          echo "✅ NOAH cluster is ready for service deployment"
          echo ""
          echo "Next steps:"
          echo "1. Deploy services: python noah.py deploy all --domain {{ domain | default('noah-infra.com') }}"
          echo "2. Or deploy individually:"
          echo "   - python noah.py deploy samba4 --domain {{ domain | default('noah-infra.com') }}"
          echo "   - python noah.py deploy authentik --domain {{ domain | default('noah-infra.com') }}"
          echo "   - python noah.py deploy cilium --domain {{ domain | default('noah-infra.com') }}"
          echo "3. Test deployment: python noah.py test sso"
          echo "4. Check status: python noah.py status"
          echo ""
          exit 0
        else
          echo "❌ FAILURE: $failures validation check(s) failed"
          echo "⚠️  Cluster creation incomplete - manual intervention required"
          echo ""
          echo "Troubleshooting steps:"
          echo "1. Review failed components above"
          echo "2. Run: python noah.py setup initialize"
          echo "3. Check dependencies: python noah.py setup doctor"
          echo "4. Verify file permissions in Age/ and Certificates/ directories"
          echo "5. Ensure virtual environment is properly activated"
          echo ""
          exit 1
        fi
      args:
        chdir: /root/New
      register: comprehensive_validation
      failed_when: comprehensive_validation.rc != 0
