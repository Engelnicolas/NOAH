---
- name: Create NOAH Kubernetes Cluster
  hosts: local
  gather_facts: yes
  vars:
    cluster_name: "noah-cluster"
    
  tasks:
    - name: "PREREQUISITE: Validate cluster is clean before creation"
      ansible.builtin.shell: |
        echo "=== VALIDATING CLEAN CLUSTER STATE ==="
        
        # Check for existing K3s processes
        if pgrep -f k3s >/dev/null 2>&1; then
          echo "ERROR: K3s processes are still running. Run 'python noah.py cluster destroy' first."
          exit 1
        fi
        
        # Check for existing K3s service
        if systemctl is-active k3s >/dev/null 2>&1; then
          echo "ERROR: K3s service is still active. Run 'python noah.py cluster destroy' first."
          exit 1
        fi
        
        # Check for existing kubectl context
        if kubectl cluster-info >/dev/null 2>&1; then
          echo "ERROR: Existing cluster is accessible. Run 'python noah.py cluster destroy' first."
          exit 1
        fi
        
        # Check for existing Helm releases
        if command -v helm >/dev/null 2>&1; then
          if helm list --all-namespaces -o json 2>/dev/null | jq -e '. | length > 0' >/dev/null; then
            echo "ERROR: Existing Helm releases found. Run 'python noah.py cluster destroy' first."
            exit 1
          fi
        fi
        
        # Check for existing NOAH data directories
        for dir in "/var/lib/rancher/k3s" "/etc/rancher/k3s" "/run/k3s"; do
          if [ -d "$dir" ]; then
            echo "ERROR: K3s data directory exists: $dir. Run 'python noah.py cluster destroy' first."
            exit 1
          fi
        done
        
        echo "✓ No existing cluster components found"
        echo "✓ System is clean and ready for cluster creation"
        echo "=== PREREQUISITE VALIDATION PASSED ==="
      ignore_errors: false
      changed_when: false

    - name: Ensure basic system packages are installed
      package:
        name: "{{ item }}"
        state: present
      loop:
        - age
        - python3
        - python3-pip
        - python3-venv
        - curl
        - git
      become: yes
      when: ansible_os_family == "Debian"

    - name: Check if kubectl is installed
      command: which kubectl
      register: kubectl_check
      failed_when: false
      changed_when: false

    - name: Check if helm is installed
      command: which helm
      register: helm_check
      failed_when: false
      changed_when: false

    - name: Check if sops is installed
      command: which sops
      register: sops_check
      failed_when: false
      changed_when: false

    - name: Display tool availability status
      debug:
        msg:
          - "kubectl available: {{ kubectl_check.rc == 0 }}"
          - "helm available: {{ helm_check.rc == 0 }}"
          - "sops available: {{ sops_check.rc == 0 }}"
          - "age available: {{ 'yes' if ansible_facts.packages is defined and 'age' in ansible_facts.packages else 'unknown' }}"

    - name: Check if virtual environment exists
      stat:
        path: /root/New/.venv
      register: venv_exists

    - name: Create Python virtual environment
      command: python3 -m venv .venv
      args:
        chdir: /root/New
      when: not venv_exists.stat.exists

    - name: Install Python dependencies from Scripts/requirements.txt
      shell: |
        ./.venv/bin/python -m pip install --upgrade pip
        ./.venv/bin/python -m pip install packaging
        ./.venv/bin/python -m pip install -r ./Scripts/requirements.txt
      args:
        chdir: /root/New
        creates: ./.venv/lib/python*/site-packages/click
      register: pip_install_result

    - name: Verify NOAH CLI functionality
      shell: |
        export PYTHONPATH=$(pwd):$PYTHONPATH
        ./.venv/bin/python noah.py --help
      args:
        chdir: /root/New
      register: noah_cli_test
      failed_when: noah_cli_test.rc != 0

    - name: Display NOAH CLI verification result
      debug:
        msg: "NOAH CLI is functional and ready for deployment"
      when: noah_cli_test.rc == 0

    - name: Create cluster namespaces
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Namespace
        state: present
      loop:
        - identity
        - cilium-system
      when: false  # Skip in test mode

    - name: Initialize Age encryption
      shell: |
        if [ ! -f ./Age/keys.txt ]; then
          mkdir -p ./Age
          age-keygen > ./Age/keys.txt
          chmod 600 ./Age/keys.txt
        fi
      args:
        chdir: /root/New
        creates: /root/New/Age/keys.txt

    - name: Extract Age public key
      shell: grep "public key:" ./Age/keys.txt | cut -d' ' -f4
      args:
        chdir: /root/New
      register: age_public_key
      changed_when: false

    - name: Create SOPS configuration
      copy:
        content: |
          creation_rules:
            - path_regex: .*\.enc\.yaml$
              age: {{ age_public_key.stdout }}
            - path_regex: .*\.enc\.json$
              age: {{ age_public_key.stdout }}
        dest: /root/New/.sops.yaml
        mode: '0644'

    - name: Generate self-signed CA certificate
      block:
        - name: Create certificate directory
          file:
            path: ./Certificates
            state: directory
            mode: '0755'

        - name: Generate CA private key with OpenSSL command
          shell: |
            if [ ! -f ./Certificates/ca.key ]; then
              openssl genrsa -out ./Certificates/ca.key 4096
              chmod 600 ./Certificates/ca.key
            fi
          args:
            creates: ./Certificates/ca.key

        - name: Generate self-signed CA certificate with OpenSSL command
          shell: |
            if [ ! -f ./Certificates/ca.crt ]; then
              openssl req -new -x509 -key ./Certificates/ca.key -sha256 -subj "/C=US/ST=CA/O=NOAH/CN=NOAH CA" -days 3650 -out ./Certificates/ca.crt
              chmod 644 ./Certificates/ca.crt
            fi
          args:
            creates: ./Certificates/ca.crt

    - name: Create ConfigMap for CA certificate
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: noah-ca-bundle
            namespace: identity
          data:
            ca-bundle.crt: "{{ lookup('file', './Certificates/ca-cert.pem') }}"
      when: false  # Skip in test mode

    - name: Display cluster creation summary
      debug:
        msg:
          - "Cluster {{ cluster_name }} initialized successfully"
          - "Python virtual environment: ./.venv created"
          - "NOAH dependencies installed from Scripts/requirements.txt"
          - "NOAH CLI verified and functional"
          - "Age public key: {{ age_public_key.stdout }}"
          - "Namespaces created: identity, cilium-system"
          - "CA certificate generated"
          - "Cluster ready for NOAH service deployment"
