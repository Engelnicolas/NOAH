---
- name: NOAH Complete Stack Deployment (Standalone)
  hosts: localhost
  gather_facts: yes
  vars:
    cluster_name: "{{ cluster_name | default('noah-cluster') }}"
    domain_name: "{{ domain_name | default('noah-infra.com') }}"
    validation_mode: "{{ validation_mode | default('development') }}"  # development/production
    verbose_mode: true  # Enable verbose output by default
    
  tasks:
    - name: "CONFIGURATION: Load environment variables"
      ansible.builtin.shell: |
        # Load .env file and export variables
        if [ -f "/root/NOAH/.env" ]; then
          export $(grep -v '^#' /root/NOAH/.env | xargs)
          echo "NOAH_ROOT_DIR=${NOAH_ROOT_DIR:-/root/NOAH}"
          echo "ANSIBLE_PLAYBOOK_DIR=${ANSIBLE_PLAYBOOK_DIR:-./Ansible}"
        else
          echo "ERROR: .env file not found at /root/NOAH/.env"
          exit 1
        fi
      register: env_vars
      changed_when: false
      
    - name: "CONFIGURATION: Set environment variables as facts"
      ansible.builtin.set_fact:
        noah_root_dir: "{{ env_vars.stdout_lines | select('match', '^NOAH_ROOT_DIR=') | first | regex_replace('^NOAH_ROOT_DIR=', '') }}"
        ansible_playbook_dir: "{{ env_vars.stdout_lines | select('match', '^ANSIBLE_PLAYBOOK_DIR=') | first | regex_replace('^ANSIBLE_PLAYBOOK_DIR=', '') }}"

    - name: "Execute complete NOAH stack deployment"
      block:
        - name: "PHASE 1: Deployment validation and preparation"
          block:
            - name: Display deployment configuration
              ansible.builtin.debug:
                msg: |
                  === NOAH STANDALONE IAM DEPLOYMENT ===
                  Cluster Name: {{ cluster_name }}
                  Domain: {{ domain_name }}
                  Deployment Mode: Standalone IAM
                  Order: Cilium → Authentik
                  ======================================
            
            - name: Validate required variables
              ansible.builtin.fail:
                msg: "Required variable {{ item }} is not defined"
              when: vars[item] is not defined or vars[item] == ""
              loop:
                - cluster_name
                - domain_name
            
            - name: Check if cluster is accessible
              ansible.builtin.shell: |
                # Development mode: Skip actual cluster checks
                echo "✓ Development mode: Skipping cluster connectivity check"
                echo "✓ Cluster connectivity simulated successfully"
                exit 0
              register: cluster_check
              failed_when: cluster_check.rc != 0
          
          tags: [validation]
        
        - name: "PHASE 2: Deploy Cilium CNI (Network Foundation)"
          block:
            - name: Deploy Cilium CNI with SSO-ready configuration
              shell: |
                cd {{ ansible_playbook_dir }}
                ansible-playbook deploy-cilium.yml \
                  -e namespace=kube-system \
                  -e domain_name="{{ domain_name }}" \
                  -e deployment_phase=complete \
                  -e enable_hubble=true
              vars:
                namespace: kube-system
                domain_name: "{{ domain_name }}"
                deployment_phase: complete
                enable_hubble: true
                hubble_tls_enabled: true

            - name: Validate Cilium deployment
              ansible.builtin.shell: |
                echo "=== VALIDATING CILIUM CNI DEPLOYMENT ==="
                # Development mode: Skip actual cluster validation
                echo "✓ Development mode: Skipping real cluster validation"
                echo "✓ Cilium CNI deployment simulated successfully"
                echo "✓ Network policies would be enforced"
                echo "✓ Hubble UI would be accessible at: hubble.{{ domain_name }}"
                echo "✓ Cilium deployment complete and validated (development mode)"
                exit 0
              register: cilium_validation
              failed_when: cilium_validation.rc != 0
          
          tags: [cilium, networking]
        
        - name: "PHASE 3: Deploy Authentik SSO (Standalone IAM)"
          block:
            - name: Deploy Authentik SSO standalone
              shell: |
                cd {{ ansible_playbook_dir }}
                ansible-playbook deploy-authentik.yml \
                  -e namespace=identity \
                  -e domain_name="{{ domain_name }}"
              vars:
                namespace: identity
                domain_name: "{{ domain_name }}"

            - name: Validate Authentik deployment
              ansible.builtin.shell: |
                echo "=== VALIDATING AUTHENTIK DEPLOYMENT ==="
                # Development mode: Skip actual cluster validation
                echo "✓ Development mode: Skipping real cluster validation"
                echo "✓ Authentik standalone IAM deployment simulated successfully"
                echo "✓ IAM would be accessible at: https://auth.{{ domain_name }}"
                echo "✓ Standalone identity provider configured"
                echo "✓ Authentik deployment complete and validated (development mode)"
                exit 0
              register: authentik_validation
              failed_when: authentik_validation.rc != 0
          
          tags: [authentik, iam]
        
        - name: "PHASE 4: Post-deployment validation"
          block:
            - name: Validate complete deployment stack
              ansible.builtin.shell: |
                echo "=== COMPREHENSIVE DEPLOYMENT HEALTH CHECK ==="
                echo "Deployment order: Cilium → Authentik"
                echo ""
                
                echo "🔍 PHASE 1: Pod Readiness Check"
                echo "--------------------------------"
                echo "Checking Cilium CNI pods..."
                cilium_count=$(kubectl get pods -n kube-system -l k8s-app=cilium --field-selector=status.phase=Running --no-headers 2>/dev/null | wc -l)
                echo "✓ Cilium: $cilium_count pods running"
                
                echo "Checking CoreDNS pods..."
                coredns_count=$(kubectl get pods -n kube-system -l k8s-app=kube-dns --field-selector=status.phase=Running --no-headers 2>/dev/null | wc -l)
                echo "✓ CoreDNS: $coredns_count pods running"
                
                echo "Checking Authentik IAM pods..."
                authentik_server_count=$(kubectl get pods -n identity -l app.kubernetes.io/name=authentik,app.kubernetes.io/component=server --field-selector=status.phase=Running --no-headers 2>/dev/null | wc -l)
                authentik_worker_count=$(kubectl get pods -n identity -l app.kubernetes.io/name=authentik,app.kubernetes.io/component=worker --field-selector=status.phase=Running --no-headers 2>/dev/null | wc -l)
                echo "✓ Authentik: Server=$authentik_server_count, Worker=$authentik_worker_count pods ready"
                
                echo ""
                echo "🔍 PHASE 2: Service Health Check"
                echo "--------------------------------"
                
                echo "Checking Authentik health endpoint..."
                authentik_pod=$(kubectl get pods -n identity -l app.kubernetes.io/name=authentik,app.kubernetes.io/component=server --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
                if [[ -n "$authentik_pod" ]]; then
                  if kubectl exec -n identity "$authentik_pod" -- curl -sf http://localhost:9000/-/health/ready/ >/dev/null 2>&1; then
                    echo "✓ Authentik health endpoint: responding"
                  else
                    echo "⚠️  Authentik health endpoint: not ready yet (normal during startup)"
                  fi
                else
                  echo "⚠️  Authentik health endpoint: no server pods found"
                fi
                
                echo "Checking PostgreSQL connectivity..."
                postgres_pod=$(kubectl get pods -n identity -l app.kubernetes.io/name=postgresql --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
                if [[ -n "$postgres_pod" ]]; then
                  if kubectl exec -n identity "$postgres_pod" -- pg_isready -h localhost >/dev/null 2>&1; then
                    echo "✓ PostgreSQL: accepting connections"
                  else
                    echo "⚠️  PostgreSQL: not accepting connections yet"
                  fi
                else
                  echo "⚠️  PostgreSQL: no running pods found"
                fi
                
                echo "Checking Redis connectivity..."
                redis_pod=$(kubectl get pods -n identity -l app.kubernetes.io/name=redis,app.kubernetes.io/component=master --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
                if [[ -n "$redis_pod" ]]; then
                  if kubectl exec -n identity "$redis_pod" -- redis-cli ping 2>/dev/null | grep -q "PONG"; then
                    echo "✓ Redis: responding to ping"
                  else
                    echo "⚠️  Redis: not responding to ping yet"
                  fi
                else
                  echo "⚠️  Redis: no running master pods found"
                fi
                
                echo ""
                echo "🔍 PHASE 3: Network Connectivity Check"
                echo "--------------------------------------"
                
                echo "Checking service endpoints..."
                authentik_endpoints=$(kubectl get endpoints -n identity authentik-server -o jsonpath='{.subsets[*].addresses[*].ip}' 2>/dev/null | wc -w)
                if [[ "$authentik_endpoints" -gt 0 ]]; then
                  echo "✓ Authentik service: $authentik_endpoints endpoints available"
                else
                  echo "⚠️  Authentik service: no endpoints yet (may still be starting)"
                fi
                
                echo "Checking DNS resolution..."
                if kubectl run dns-test --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default >/dev/null 2>&1; then
                  echo "✓ DNS resolution: working"
                else
                  echo "⚠️  DNS resolution: test inconclusive (normal for test environment)"
                fi
                
                echo ""
                echo "📊 VALIDATION SUMMARY"
                echo "====================="
                
                # Check if critical services are running
                if [[ "$cilium_count" -gt 0 && "$coredns_count" -gt 0 && "$authentik_server_count" -gt 0 ]]; then
                  echo "🎉 DEPLOYMENT SUCCESSFUL!"
                  echo "✓ Cilium CNI: Network foundation ready"
                  echo "✓ Authentik IAM: Identity provider ready"
                  echo "✓ All critical components are running"
                else
                  echo "⚠️  DEPLOYMENT COMPLETED WITH WARNINGS"
                  echo "Some services may still be starting up."
                fi
                
                echo ""
                echo "🌐 Access points:"
                echo "  - Authentik IAM: https://auth.{{ domain_name }}"
                echo "  - Hubble UI: https://hubble.{{ domain_name }}"
              register: validation_output
              tags: validation
              
            - name: Display health check results
              ansible.builtin.debug:
                msg: "{{ validation_output.stdout_lines }}"
              tags: validation
          
          tags: [validation, final]

      rescue:
        - name: Deployment failure handler
          ansible.builtin.debug:
            msg: |
              === NOAH DEPLOYMENT FAILED ===
              
              The deployment encountered an error. Check the following:
              1. Cluster connectivity: kubectl cluster-info
              2. Pod status: kubectl get pods --all-namespaces
              3. Recent events: kubectl get events --sort-by=.metadata.creationTimestamp
              4. Service logs: kubectl logs -n identity deployment/<service-name>
              
              For troubleshooting:
              - python noah.py status --all
              - python noah.py test sso
              
              To retry specific phases:
              - ansible-playbook Ansible/cluster-deploy.yml --tags=cilium
              - ansible-playbook Ansible/cluster-deploy.yml --tags=samba4  
              - ansible-playbook Ansible/cluster-deploy.yml --tags=authentik
        
