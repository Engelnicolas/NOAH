---
- name: NOAH Cluster Redeploy - Full Infrastructure Recreation
  hosts: local
  gather_facts: yes
  vars:
    cluster_name: "{{ cluster_name | default('noah-cluster') }}"
    domain: "{{ domain | default('noah-infra.com') }}"
    
  tasks:
    - name: "LOAD CONFIGURATION: Read environment variables from .env file"
      ansible.builtin.shell: |
        # Load .env file and export variables
        if [ -f "/root/NOAH/.env" ]; then
          export $(grep -v '^#' /root/NOAH/.env | xargs)
          echo "NOAH_ROOT_DIR=${NOAH_ROOT_DIR:-/root/NOAH}"
          echo "ANSIBLE_PLAYBOOK_DIR=${ANSIBLE_PLAYBOOK_DIR:-./Ansible}"
        else
          echo "ERROR: .env file not found at /root/NOAH/.env"
          exit 1
        fi
      register: env_vars
      changed_when: false
      
    - name: "LOAD CONFIGURATION: Set environment variables as Ansible facts"
      ansible.builtin.set_fact:
        noah_root_dir: "{{ env_vars.stdout_lines | select('match', '^NOAH_ROOT_DIR=') | first | regex_replace('^NOAH_ROOT_DIR=', '') }}"
        ansible_playbook_dir: "{{ env_vars.stdout_lines | select('match', '^ANSIBLE_PLAYBOOK_DIR=') | first | regex_replace('^ANSIBLE_PLAYBOOK_DIR=', '') }}"

    - name: "Execute complete redeploy process"
      block:
        - name: "PHASE 1: Pre-deployment validation"
          block:
            - name: Display redeploy configuration
              ansible.builtin.debug:
                msg: |
                  === NOAH CLUSTER REDEPLOY CONFIGURATION ===
                  Cluster Name: {{ cluster_name }}
                  Domain: {{ domain }}
                  Security Config: {{ security_config | default('Auto-generated') }}
                  ==========================================
            
            - name: Validate required variables
              ansible.builtin.fail:
                msg: "Required variable {{ item }} is not defined"
              when: vars[item] is not defined or vars[item] == ""
              loop:
                - cluster_name
                - domain
          
          tags: [validation]
        
        - name: "PHASE 2: Clean existing cluster"
          block:
            - name: Run cluster destruction playbook
              ansible.builtin.include: "{{ ansible_playbook_dir }}/cluster-destroy.yml"
              vars:
                cluster_name: "{{ cluster_name }}"
                cleanup_secrets: true
                cleanup_certificates: true
                security_config: "{{ security_config }}"
            
            - name: Wait for cluster cleanup completion
              ansible.builtin.pause:
                seconds: 300
                prompt: "Waiting for cluster cleanup to complete..."
            
            - name: Verify cluster is completely clean
              ansible.builtin.shell: |
                echo "=== VERIFYING CLEAN STATE ==="
                
                # Verify no K3s processes
                if pgrep -f k3s >/dev/null 2>&1; then
                  echo "ERROR: K3s processes still running"
                  exit 1
                fi
                
                # Verify no kubectl context
                if kubectl cluster-info >/dev/null 2>&1; then
                  echo "ERROR: Cluster still accessible"
                  exit 1
                fi
                
                # Verify no Helm releases
                if command -v helm >/dev/null 2>&1; then
                  if helm list --all-namespaces -o json 2>/dev/null | jq -e '. | length > 0' >/dev/null; then
                    echo "ERROR: Helm releases still exist"
                    exit 1
                  fi
                fi
                
                echo "✓ Cluster successfully cleaned"
              register: cleanup_verification
              failed_when: cleanup_verification.rc != 0
          
          tags: [cleanup]
        
        - name: "PHASE 3: Create new cluster"
          block:
            - name: Run cluster creation playbook
              ansible.builtin.include: "{{ ansible_playbook_dir }}/cluster-create.yml"
              vars:
                cluster_name: "{{ cluster_name }}"
                domain: "{{ domain }}"
                security_config: "{{ security_config }}"
            
            - name: Wait for cluster to be ready
              ansible.builtin.shell: |
                echo "=== WAITING FOR CLUSTER READINESS ==="
                timeout=300
                start_time=$(date +%s)
                
                while true; do
                  current_time=$(date +%s)
                  elapsed=$((current_time - start_time))
                  
                  if [ $elapsed -gt $timeout ]; then
                    echo "ERROR: Cluster readiness timeout after ${timeout}s"
                    exit 1
                  fi
                  
                  # Check if kubectl can connect
                  if kubectl cluster-info >/dev/null 2>&1; then
                    echo "✓ Cluster API is accessible"
                    
                    # Check if core pods are running
                    if kubectl get pods -n kube-system --field-selector=status.phase=Running 2>/dev/null | grep -q "Running"; then
                      echo "✓ Core system pods are running"
                      
                      # Additional validation: Check if we can create a test namespace
                      if kubectl create namespace noah-redeploy-test 2>/dev/null; then
                        kubectl delete namespace noah-redeploy-test 2>/dev/null
                        echo "✓ Cluster is fully operational"
                        break
                      fi
                    fi
                  fi
                  
                  echo "Waiting for cluster... (${elapsed}s elapsed)"
                  sleep 10
                done
              register: cluster_readiness
              failed_when: cluster_readiness.rc != 0
          
          tags: [create]
        
        - name: "PHASE 4: Deploy services in optimal order"
          block:
            # Step 1: Deploy Cilium CNI COMPLETELY (both preparation and SSO integration)
            - name: Deploy Cilium CNI - Complete Deployment
              ansible.builtin.include: "{{ ansible_playbook_dir }}/deploy-cilium.yml"
              vars:
                namespace: kube-system
                domain: "{{ domain }}"
                security_config: "{{ security_config }}"
                deployment_phase: full
                service_name: cilium-complete
                use_generated_secrets: true
                secrets_backend: sops
                enable_hubble: true
                hubble_tls_enabled: true
                create_hubble_certs: true
                hubble_cert_secret: hubble-server-certs

            - name: Wait for Cilium complete deployment
              ansible.builtin.shell: |
                echo "=== WAITING FOR CILIUM COMPLETE DEPLOYMENT ==="
                timeout=300
                start_time=$(date +%s)
                
                while true; do
                  current_time=$(date +%s)
                  elapsed=$((current_time - start_time))
                  
                  if [ $elapsed -gt $timeout ]; then
                    echo "ERROR: Cilium deployment timeout after ${timeout}s"
                    exit 1
                  fi
                  
                  # Check if Cilium DaemonSet is ready
                  cilium_ready=$(kubectl get daemonset cilium -n kube-system -o jsonpath='{.status.numberReady}' 2>/dev/null || echo "0")
                  cilium_desired=$(kubectl get daemonset cilium -n kube-system -o jsonpath='{.status.desiredNumberScheduled}' 2>/dev/null || echo "1")
                  
                  if [ "$cilium_ready" = "$cilium_desired" ] && [ "$cilium_ready" -gt "0" ]; then
                    echo "✓ Cilium DaemonSet is ready ($cilium_ready/$cilium_desired)"
                    
                    # Check Cilium status
                    if kubectl exec -n kube-system ds/cilium -- cilium status --brief 2>/dev/null | grep -q "OK"; then
                      echo "✓ Cilium networking is operational"
                      
                      # Check if Hubble UI is ready (optional check)
                      hubble_ready=$(kubectl get deployment hubble-ui -n kube-system -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
                      if [ "$hubble_ready" = "1" ]; then
                        echo "✓ Hubble UI is ready"
                      else
                        echo "⚠ Hubble UI not ready yet (will retry)"
                      fi
                      
                      # Verify network policies can be applied
                      if kubectl get networkpolicies -A >/dev/null 2>&1; then
                        echo "✓ Network policy support is available"
                        break
                      else
                        echo "Waiting for network policy support..."
                      fi
                    else
                      echo "Waiting for Cilium to become operational..."
                    fi
                  fi
                  
                  echo "Waiting for Cilium complete deployment... (${elapsed}s elapsed) [Ready: $cilium_ready/$cilium_desired]"
                  sleep 15
                done
              register: cilium_deployment
              failed_when: cilium_deployment.rc != 0

            # Step 2: Deploy Samba4 Active Directory with full network ready
            - name: Deploy Samba4 Active Directory
              ansible.builtin.include: "{{ ansible_playbook_dir }}/deploy-samba4.yml"
              vars:
                namespace: identity
                domain: "{{ domain }}"
                security_config: "{{ security_config }}"
                service_name: samba4
                use_generated_secrets: true
                secrets_backend: sops
                samba_realm: "{{ domain | upper }}"
                samba_domain: "{{ domain | upper | replace('.', '_') }}"
                create_admin_secret: true
                admin_secret_name: samba4-admin-secret
            
            - name: Wait for Samba4 deployment and network integration
              ansible.builtin.shell: |
                echo "=== WAITING FOR SAMBA4 DEPLOYMENT WITH FULL NETWORK ==="
                timeout=300
                start_time=$(date +%s)
                
                while true; do
                  current_time=$(date +%s)
                  elapsed=$((current_time - start_time))
                  
                  if [ $elapsed -gt $timeout ]; then
                    echo "ERROR: Samba4 deployment timeout after ${timeout}s"
                    exit 1
                  fi
                  
                  # Check if Samba4 deployment is ready
                  if kubectl get deployment samba4 -n identity -o jsonpath='{.status.readyReplicas}' 2>/dev/null | grep -q "1"; then
                    echo "✓ Samba4 deployment is ready"
                    
                    # Additional check: Verify pod is actually running and network accessible
                    if kubectl get pods -n identity -l app=samba4 --field-selector=status.phase=Running 2>/dev/null | grep -q "Running"; then
                      echo "✓ Samba4 pod is running"
                      
                      # Test LDAP connectivity (basic check)
                      if kubectl exec -n identity deployment/samba4 -- ldapsearch -x -H ldap://localhost:389 -s base 2>/dev/null | grep -q "result: 0 Success"; then
                        echo "✓ Samba4 LDAP service is accessible"
                        
                        # Test network connectivity from other namespaces (verify Cilium networking)
                        if kubectl run test-samba4-connectivity --image=busybox --rm -i --restart=Never -- nc -zv samba4.identity.svc.cluster.local 389 2>/dev/null | grep -q "open"; then
                          echo "✓ Samba4 LDAP service is reachable via Cilium networking"
                          break
                        else
                          echo "Waiting for Samba4 network accessibility..."
                        fi
                      else
                        echo "Waiting for Samba4 LDAP service to be ready..."
                      fi
                    fi
                  fi
                  
                  echo "Waiting for Samba4 with full network integration... (${elapsed}s elapsed)"
                  sleep 10
                done
              register: samba4_deployment
              failed_when: samba4_deployment.rc != 0

            # Step 3: Deploy Authentik SSO with Samba4 LDAP integration (FINAL STEP)
            - name: Deploy Authentik SSO with LDAP Integration
              ansible.builtin.include: "{{ ansible_playbook_dir }}/deploy-authentik.yml"
              vars:
                namespace: identity
                domain: "{{ domain }}"
                security_config: "{{ security_config }}"
                service_name: authentik
                use_generated_secrets: true
                secrets_backend: sops
                create_db_secrets: true
                postgresql_secret_name: authentik-postgresql
                redis_secret_name: authentik-redis
                app_secret_name: authentik-secret
                ldap_integration: true
                ldap_base_dn: "dc={{ domain.split('.') | join(',dc=') }}"
                ldap_server_uri: "ldap://samba4.identity.svc.cluster.local:389"
                ldap_bind_dn: "cn=Administrator,cn=Users,dc={{ domain.split('.') | join(',dc=') }}"

            - name: Wait for Authentik deployment with LDAP integration
              ansible.builtin.shell: |
                echo "=== WAITING FOR AUTHENTIK DEPLOYMENT WITH LDAP INTEGRATION ==="
                timeout=300
                start_time=$(date +%s)
                
                while true; do
                  current_time=$(date +%s)
                  elapsed=$((current_time - start_time))
                  
                  if [ $elapsed -gt $timeout ]; then
                    echo "ERROR: Authentik deployment timeout after ${timeout}s"
                    exit 1
                  fi
            - name: Wait for Authentik deployment with LDAP integration (FINAL)
              ansible.builtin.shell: |
                echo "=== WAITING FOR AUTHENTIK DEPLOYMENT WITH LDAP INTEGRATION (FINAL) ==="
                timeout=300
                start_time=$(date +%s)
                
                while true; do
                  current_time=$(date +%s)
                  elapsed=$((current_time - start_time))
                  
                  if [ $elapsed -gt $timeout ]; then
                    echo "ERROR: Authentik deployment timeout after ${timeout}s"
                    exit 1
                  fi
                  
                  # Check if Authentik deployments are ready
                  server_ready=$(kubectl get deployment authentik-server -n identity -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
                  worker_ready=$(kubectl get deployment authentik-worker -n identity -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
                  
                  if [ "$server_ready" = "1" ] && [ "$worker_ready" = "1" ]; then
                    echo "✓ Authentik server and worker deployments are ready"
                    
                    # Additional check: Verify pods are actually running
                    if kubectl get pods -n identity -l app.kubernetes.io/name=authentik --field-selector=status.phase=Running 2>/dev/null | grep -q "Running"; then
                      echo "✓ Authentik pods are running"
                      
                      # Test LDAP connectivity from Authentik to Samba4
                      if kubectl exec -n identity deployment/authentik-server -- nc -zv samba4.identity.svc.cluster.local 389 2>/dev/null | grep -q "open"; then
                        echo "✓ Authentik → Samba4 LDAP connectivity verified"
                        
                        # Test Authentik API
                        if kubectl exec -n identity deployment/authentik-server -- wget -q -O- http://localhost:9000/api/v3/core/tenants/ 2>/dev/null | grep -q "noah-infra.com"; then
                          echo "✓ Authentik API is responding"
                          echo "✓ Complete SSO stack deployment successful!"
                          break
                        else
                          echo "Waiting for Authentik API to be ready..."
                        fi
                      else
                        echo "Waiting for Authentik → Samba4 LDAP connectivity..."
                      fi
                    fi
                  fi
                  
                  echo "Waiting for Authentik final deployment... (${elapsed}s elapsed) [Server: $server_ready, Worker: $worker_ready]"
                  sleep 10
                done
              register: authentik_deployment
              failed_when: authentik_deployment.rc != 0
          
          tags: [deploy]
        
        - name: "PHASE 5: Post-deployment validation"
          block:
            - name: Validate complete deployment stack
              ansible.builtin.shell: |
                echo "=== FINAL DEPLOYMENT VALIDATION ==="
                echo "New deployment order: Cilium → Samba4 → Authentik"
                echo ""
                
                # Check all critical pods are running
                echo "Checking overall pod status..."
                failing_pods=$(kubectl get pods --all-namespaces --field-selector=status.phase!=Running,status.phase!=Succeeded --no-headers 2>/dev/null | wc -l)
                if [ "$failing_pods" -gt "0" ]; then
                  echo "⚠ Found $failing_pods non-running pods:"
                  kubectl get pods --all-namespaces --field-selector=status.phase!=Running,status.phase!=Succeeded 2>/dev/null || true
                else
                  echo "✓ All pods are running successfully"
                fi
                echo ""
                
                # Validate Cilium (deployed first)
                echo "Validating Cilium CNI (Step 1)..."
                cilium_ready=$(kubectl get daemonset cilium -n kube-system -o jsonpath='{.status.numberReady}' 2>/dev/null || echo "0")
                cilium_desired=$(kubectl get daemonset cilium -n kube-system -o jsonpath='{.status.desiredNumberScheduled}' 2>/dev/null || echo "1")
                if [ "$cilium_ready" = "$cilium_desired" ] && [ "$cilium_ready" -gt "0" ]; then
                  echo "✓ Cilium CNI: $cilium_ready/$cilium_desired pods ready"
                  
                  # Check Cilium status
                  if kubectl exec -n kube-system ds/cilium -- cilium status --brief 2>/dev/null | grep -q "OK"; then
                    echo "✓ Cilium networking operational"
                  else
                    echo "⚠ Cilium status check inconclusive"
                  fi
                  
                  # Check Hubble UI
                  hubble_ready=$(kubectl get deployment hubble-ui -n kube-system -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
                  if [ "$hubble_ready" = "1" ]; then
                    echo "✓ Hubble UI ready"
                  else
                    echo "⚠ Hubble UI not ready"
                  fi
                else
                  echo "❌ Cilium CNI not ready: $cilium_ready/$cilium_desired"
                  exit 1
                fi
                echo ""
                
                # Validate Samba4 (deployed second)
                echo "Validating Samba4 Active Directory (Step 2)..."
                samba4_ready=$(kubectl get deployment samba4 -n identity -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
                if [ "$samba4_ready" = "1" ]; then
                  echo "✓ Samba4 deployment ready"
                  
                  # Test LDAP service
                  if kubectl exec -n identity deployment/samba4 -- ldapsearch -x -H ldap://localhost:389 -s base 2>/dev/null | grep -q "result: 0 Success"; then
                    echo "✓ Samba4 LDAP service responding"
                  else
                    echo "⚠ Samba4 LDAP service check inconclusive"
                  fi
                else
                  echo "❌ Samba4 deployment not ready: $samba4_ready/1"
                  exit 1
                fi
                echo ""
                
                # Validate Authentik (deployed third)
                echo "Validating Authentik SSO (Step 3)..."
                server_ready=$(kubectl get deployment authentik-server -n identity -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
                worker_ready=$(kubectl get deployment authentik-worker -n identity -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
                
                if [ "$server_ready" = "1" ] && [ "$worker_ready" = "1" ]; then
                  echo "✓ Authentik server and worker ready"
                  
                  # Test LDAP connectivity to Samba4
                  if kubectl exec -n identity deployment/authentik-server -- nc -zv samba4.identity.svc.cluster.local 389 2>/dev/null | grep -q "open"; then
                    echo "✓ Authentik → Samba4 LDAP connectivity verified"
                  else
                    echo "⚠ Authentik → Samba4 connectivity check inconclusive"
                  fi
                  
                  # Test Authentik API
                  if kubectl exec -n identity deployment/authentik-server -- wget -q -O- http://localhost:9000/api/v3/core/tenants/ 2>/dev/null | grep -q "noah-infra.com"; then
                    echo "✓ Authentik API responding"
                  else
                    echo "⚠ Authentik API check inconclusive"
                  fi
                else
                  echo "❌ Authentik deployments not ready: Server $server_ready/1, Worker $worker_ready/1"
                  exit 1
                fi
                echo ""
                
                # Network policies validation
                echo "Validating network policies..."
                network_policies=$(kubectl get networkpolicies -n identity --no-headers 2>/dev/null | wc -l)
                if [ "$network_policies" -gt "0" ]; then
                  echo "✓ Network policies applied: $network_policies policies"
                else
                  echo "⚠ No network policies found"
                fi
                echo ""
                
                echo "🎉 DEPLOYMENT VALIDATION COMPLETE"
                echo "Deployment order: Cilium → Samba4 → Authentik ✓"
                echo "All critical services validated ✓"
                
                echo "Validating Cilium..."
                if ! kubectl get daemonset cilium -n kube-system -o jsonpath='{.status.numberReady}' 2>/dev/null | grep -q "[1-9]"; then
                  echo "ERROR: Cilium daemonset not ready"
                  exit 1
                fi
                
                echo "✓ All services validated successfully"
              register: final_validation
              failed_when: final_validation.rc != 0
            
            - name: Display deployment summary
              ansible.builtin.debug:
                msg: |
                  ============================================
                  🎉 NOAH CLUSTER REDEPLOY COMPLETED SUCCESSFULLY!
                  ============================================
                  
                  Cluster: {{ cluster_name }}
                  Domain: {{ domain }}
                  
                  Deployed Services:
                  ✓ Samba4 Active Directory (identity namespace)
                  ✓ Authentik SSO (identity namespace) 
                  ✓ Cilium CNI with Hubble (kube-system namespace)
                  
                  Access URLs:
                  - Authentik SSO: https://auth.{{ domain }}
                  - Hubble UI: https://hubble.{{ domain }}
                  
                  Next Steps:
                  1. Configure Authentik SSO integration
                  2. Test authentication flow
                  3. Configure network policies with Cilium
                  
                  ============================================
          
          tags: [validation]
      
      rescue:
        - name: Handle deployment failure
          ansible.builtin.debug:
            msg: |
              ❌ NOAH CLUSTER REDEPLOY FAILED
              ================================
              
              The redeploy process encountered an error during execution.
              
              Recommended recovery actions:
              1. Check the failed task output above
              2. Verify cluster state: kubectl get pods --all-namespaces
              3. Check logs: kubectl logs -n <namespace> <pod-name>
              4. For manual recovery, run individual commands:
                 - python noah.py cluster destroy --force
                 - python noah.py cluster create --name {{ cluster_name }} --domain {{ domain }}
                 - python noah.py deploy all --domain {{ domain }}
              
              ================================
        
        - name: Fail the playbook
          ansible.builtin.fail:
            msg: "Redeploy process failed - see error messages above"
