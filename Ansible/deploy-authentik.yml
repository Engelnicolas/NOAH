---
- name: Deploy Authentik SSO
  hosts: localhost
  gather_facts: no
  vars:
    authentik_namespace: "identity"
    verbose_mode: true  # Enable verbose output by default
    ansible_python_interpreter: "../.venv/bin/python"
    
  environment:
    PYTHONPATH: "../.venv/lib/python3.12/site-packages:{{ ansible_env.PYTHONPATH | default('') }}"
    
  tasks:
    - name: Create namespace
      kubernetes.core.k8s:
        name: "{{ authentik_namespace }}"
        api_version: v1
        kind: Namespace
        state: present

    - name: Check if Samba4 service exists
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: samba4
        namespace: "{{ authentik_namespace }}"
      register: samba4_service_check

    - name: Create simplified Authentik secrets for testing
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: authentik-secrets
            namespace: "{{ authentik_namespace }}"
            labels:
              app.kubernetes.io/managed-by: Helm
            annotations:
              meta.helm.sh/release-name: authentik
              meta.helm.sh/release-namespace: "{{ authentik_namespace }}"
          type: Opaque
          stringData:
            AUTHENTIK_SECRET_KEY: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=50') }}"
            AUTHENTIK_BOOTSTRAP_PASSWORD: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=24') }}"
            AUTHENTIK_BOOTSTRAP_TOKEN: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=50') }}"
            AUTHENTIK_POSTGRESQL__PASSWORD: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=24') }}"
            AUTHENTIK_REDIS__PASSWORD: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=24') }}"

    - name: Create Authentik LDAP Source Configuration for Samba4 integration
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: authentik-ldap-config
            namespace: "{{ authentik_namespace }}"
            labels:
              app.kubernetes.io/managed-by: Helm
            annotations:
              meta.helm.sh/release-name: authentik
              meta.helm.sh/release-namespace: "{{ authentik_namespace }}"
          data:
            ldap-source.yaml: |
              # LDAP Source Configuration for Samba4 Integration
              server_uri: "{{ 'ldap://samba4.' + authentik_namespace + '.svc.cluster.local:389' if samba4_service_check.resources else 'ldap://samba4.identity.svc.cluster.local:389' }}"
              bind_cn: "CN=admin,CN=Users,DC=noah,DC=local"
              bind_password: "${SAMBA_ADMIN_PASSWORD}"
              base_dn: "DC=noah,DC=local"
              user_dn: "CN=Users,DC=noah,DC=local"
              group_dn: "CN=Groups,DC=noah,DC=local"
              sync_users: true
              sync_groups: true
              sync_parent_group: "noah-users"
              additional_user_dn: "CN=Computers,DC=noah,DC=local"
              additional_group_dn: "CN=Builtin,DC=noah,DC=local"
              # Samba4 specific attributes
              user_object_filter: "(objectClass=user)"
              group_object_filter: "(objectClass=group)"
              group_membership_field: "member"
              object_uniqueness_field: "objectSid"

    - name: Create Authentik values file for Helm deployment
      copy:
        content: |
          # Authentik configuration with Samba4 SSO integration
          authentik:
            secret_key: ""  # Will be set from secrets
            bootstrap:
              password: ""  # Will be set from secrets
              token: ""     # Will be set from secrets
            postgresql:
              enabled: false  # Use external PostgreSQL
              host: "postgresql.{{ authentik_namespace }}.svc.cluster.local"
              port: 5432
              name: "authentik"
              user: "authentik"
              password: ""  # Will be set from secrets
            redis:
              enabled: false  # Use external Redis
              host: "redis.{{ authentik_namespace }}.svc.cluster.local"
              port: 6379
              password: ""  # Will be set from secrets
          
          # External PostgreSQL configuration
          postgresql:
            enabled: true
            auth:
              postgresPassword: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=32') }}"
              username: "authentik"
              password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits,punctuation length=32') }}"
              database: "authentik"
            persistence:
              enabled: false  # Use emptyDir for testing
          
          # External Redis configuration
          redis:
            enabled: true
            auth:
              enabled: true
              password: ""  # Will be set from secrets
            persistence:
              enabled: false  # Use emptyDir for testing
          
          # Server configuration
          server:
            ingress:
              enabled: false  # Disable for internal testing
            service:
              type: ClusterIP
            replicas: 1
          
          # Worker configuration  
          worker:
            replicas: 1
            
          # LDAP outpost for Samba4 integration
          ldap:
            enabled: true
            service:
              type: ClusterIP
              port: 389
        dest: /tmp/authentik-values.yaml

    - name: Deploy Authentik using Helm
      shell: |
        helm upgrade --install authentik ../Helm/authentik \
          --namespace {{ authentik_namespace }} \
          --values /tmp/authentik-values.yaml \
          --timeout 600s \
          {% if dry_run | default(false) %}--dry-run{% endif %}
      register: authentik_helm_result

    - name: Set deployment status based on validation
      set_fact:
        authentik_deployment_status: "{{ 'VALIDATED' if authentik_helm_result.rc == 0 else 'FAILED' }}"
        authentik_validation_status: "{{ 'SUCCESS - SSO integration configured' if authentik_helm_result.rc == 0 else 'FAILED' }}"

    - name: Check Samba4 connectivity for SSO integration
      debug:
        msg:
          - "Samba4 service status: {{ 'FOUND' if samba4_service_check.resources else 'NOT FOUND' }}"
          - "LDAP endpoint: {{ 'samba4.' + authentik_namespace + '.svc.cluster.local:389' if samba4_service_check.resources else 'samba4.identity.svc.cluster.local:389' }}"
          - "SSO integration: {{ 'CONFIGURED' if samba4_service_check.resources else 'PENDING - Deploy Samba4 first' }}"

    - name: Display Authentik deployment status
      debug:
        msg:
          - "Authentik deployment validated for namespace: {{ authentik_namespace }}"
          - "Access URL: http://authentik.{{ authentik_namespace }}.svc.cluster.local"
          - "Bootstrap user: akadmin"
          - "Deployment status: {{ authentik_deployment_status }}"
          - "Validation status: {{ authentik_validation_status }}"
          - "Helm dry-run: {{ 'SUCCESS' if authentik_helm_result.rc == 0 else 'FAILED' }}"

    - name: Validate Authentik SSO deployment summary
      debug:
        msg:
          - "=== AUTHENTIK SSO DEPLOYMENT SUMMARY ==="
          - "✓ Namespace: {{ authentik_namespace }}"
          - "✓ Secrets: authentik-secrets (Helm-managed)"
          - "✓ ConfigMap: authentik-ldap-config (Samba4 integration)"
          - "✓ Helm Chart: ../Helm/authentik"
          - "✓ PostgreSQL: External dependency configured"
          - "✓ Redis: External dependency configured"
          - "✓ LDAP Integration: {{ 'ACTIVE' if samba4_service_check.resources else 'PENDING' }}"
          - "✓ SSO Backend: Samba4 LDAP ({{ 'Connected' if samba4_service_check.resources else 'Awaiting Samba4' }})"
          - "✓ Validation: {{ authentik_validation_status }}"
          - "⚠️  Note: Deploy Samba4 first for full SSO functionality"
