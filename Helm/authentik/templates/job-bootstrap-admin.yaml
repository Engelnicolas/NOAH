{{- if .Values.authentik.bootstrap.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "authentik.fullname" . }}-bootstrap-admin
  labels:
    {{- include "authentik.labels" . | nindent 4 }}
    app.kubernetes.io/component: bootstrap
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        {{- include "authentik.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: bootstrap
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-authentik
        image: curlimages/curl:8.1.0
        command: ['sh', '-c']
        args:
          - |
            echo "Waiting for Authentik server to be ready..."
            until nc -z {{ include "authentik.fullname" . }}-server.{{ .Release.Namespace }}.svc.cluster.local 80; do
              echo "Waiting for Authentik server..."
              sleep 10
            done
            echo "Authentik server is ready!"
            
            # Test HTTP endpoint
            echo "Testing Authentik HTTP endpoint..."
            until curl -s http://{{ include "authentik.fullname" . }}-server.{{ .Release.Namespace }}.svc.cluster.local:80/-/health/live/ > /dev/null; do
              echo "Waiting for Authentik to respond to HTTP requests..."
              sleep 5
            done
            echo "Authentik is responding to HTTP requests!"
            
            # Wait additional time for Authentik to fully initialize
            echo "Waiting for Authentik to fully initialize..."
            sleep 30
      containers:
      - name: create-admin-user
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["/bin/sh"]
        args:
          - -c
          - |
            echo "Creating Authentik admin user..."
            
            # Wait for database to be ready
            until python /manage.py migrate --check; do
              echo "Waiting for database migration to complete..."
              sleep 5
            done
            
            # Create admin user script
            python /manage.py shell -c "
            from authentik.core.models import User, UserTypes
            from authentik.core.models import Group
            import os
            
            admin_email = os.environ.get('AUTHENTIK_BOOTSTRAP_EMAIL', 'admin@noah-infra.com')
            admin_username = os.environ.get('AUTHENTIK_BOOTSTRAP_USER', 'akadmin')
            bootstrap_password = os.environ.get('AUTHENTIK_BOOTSTRAP_PASSWORD', '')
            
            print(f'Bootstrap admin user setup:')
            print(f'  Email: {admin_email}')
            print(f'  Username: {admin_username}')
            print(f'  Password set: {bool(bootstrap_password)}')
            
            if not bootstrap_password:
                print('ERROR: No bootstrap password provided')
                exit(1)
            
            try:
                # Check if admin user already exists
                try:
                    admin_user = User.objects.get(username=admin_username)
                    print(f'Admin user {admin_username} already exists, updating...')
                    
                    # Update existing user
                    admin_user.email = admin_email
                    admin_user.is_active = True
                    admin_user.set_password(bootstrap_password)
                    admin_user.save()
                    print('Admin user updated successfully')
                    
                except User.DoesNotExist:
                    # Create new admin user
                    print(f'Creating new admin user: {admin_username}')
                    admin_user = User.objects.create(
                        username=admin_username,
                        email=admin_email,
                        name='Authentik Default Admin',
                        type=UserTypes.INTERNAL,
                        is_active=True
                    )
                    admin_user.set_password(bootstrap_password)
                    admin_user.save()
                    print('Admin user created successfully')
                
                # Ensure user is in admin group
                try:
                    admin_group, created = Group.objects.get_or_create(
                        name='authentik Admins',
                        defaults={
                            'is_superuser': True,
                            'parent': None
                        }
                    )
                    if created:
                        print('Created authentik Admins group')
                    
                    admin_user.ak_groups.add(admin_group)
                    print(f'Added {admin_username} to authentik Admins group')
                    
                except Exception as e:
                    print(f'Warning: Could not add user to admin group: {e}')
                
                print('Bootstrap admin user setup completed successfully!')
                
            except Exception as e:
                print(f'ERROR creating admin user: {e}')
                exit(1)
            "
        env:
        - name: AUTHENTIK_REDIS__HOST
          value: "{{ include "authentik.redis.host" . }}"
        {{- if .Values.redis.auth.enabled }}
        - name: AUTHENTIK_REDIS__PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.authentik.secret.existingSecret | default (printf "%s-secret" (include "authentik.fullname" .)) }}
              key: redis-password
        {{- end }}
        - name: AUTHENTIK_POSTGRESQL__HOST
          value: "{{ include "authentik.postgresql.host" . }}"
        - name: AUTHENTIK_POSTGRESQL__NAME
          value: "{{ .Values.postgresql.auth.database }}"
        - name: AUTHENTIK_POSTGRESQL__USER
          value: "{{ .Values.postgresql.auth.username }}"
        - name: AUTHENTIK_POSTGRESQL__PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.authentik.secret.existingSecret | default (printf "%s-secret" (include "authentik.fullname" .)) }}
              key: postgresql-password
        - name: AUTHENTIK_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.authentik.secret.existingSecret | default (printf "%s-secret" (include "authentik.fullname" .)) }}
              key: secret-key
        - name: AUTHENTIK_BOOTSTRAP_EMAIL
          value: "{{ .Values.authentik.bootstrap.adminEmail }}"
        - name: AUTHENTIK_BOOTSTRAP_USER
          value: "{{ .Values.authentik.bootstrap.adminUser }}"
        - name: AUTHENTIK_BOOTSTRAP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.authentik.secret.existingSecret | default (printf "%s-secret" (include "authentik.fullname" .)) }}
              key: bootstrap-password
        - name: AUTHENTIK_ERROR_REPORTING__ENABLED
          value: "false"
        - name: AUTHENTIK_LOG_LEVEL
          value: "info"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
