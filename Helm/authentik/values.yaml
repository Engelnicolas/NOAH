replicaCount: 1

image:
  repository: ghcr.io/goauthentik/server
  tag: "2023.10.5"
  pullPolicy: IfNotPresent

worker:
  replicaCount: 1

service:
  type: LoadBalancer  # External access for OIDC endpoints
  port: 80            # HTTP port
  httpsPort: 443      # HTTPS port
  annotations:
    # Use Cilium's LoadBalancer with external access
    service.cilium.io/global: "true"
    service.cilium.io/shared: "true"
    # Enable domain-based routing for OIDC discovery
    external-dns.alpha.kubernetes.io/hostname: "auth.noah-infra.com"
    # Configure load balancing algorithm
    service.cilium.io/lb-algorithm: "round_robin"

ingress:
  enabled: true  # Enable ingress for OIDC endpoints
  className: traefik  # Using Traefik ingress controller
  annotations:
    # Traefik-specific annotations for HTTPS-only
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.middlewares: traefik-https-redirect@kubernetescrd,traefik-security-headers@kubernetescrd
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: auth.noah-infra.com
      paths:
        - path: /
          pathType: Prefix
        - path: /application/o/
          pathType: Prefix  # OIDC endpoints
        - path: /.well-known/
          pathType: Prefix  # OIDC discovery
  tls:
    - secretName: authentik-tls
      hosts:
        - auth.noah-infra.com

authentik:
  # Use our existing secret instead of auto-generating
  secret:
    existingSecret: "authentik-secrets"
    secretKey: "AUTHENTIK_SECRET_KEY"
  errorReporting:
    enabled: false
  logLevel: info
  # OIDC Provider Configuration
  oidc:
    enabled: true
    issuerUrl: "https://auth.noah-infra.com/application/o/kubernetes/"
    clientId: "kubernetes-cluster"
    # Client secret will be generated and stored in kubernetes secret
  email:
    host: smtp.noah-infra.com
    port: 587
    username: ""
    password: ""
    useTls: true
    useSSL: false
    from: authentik@noah-infra.com
  
  # Standalone IAM Configuration - No external LDAP integration
  bootstrap:
    enabled: true
    adminUser: "akadmin"
    adminEmail: "admin@noah-infra.com"
    
  outposts:
    ldap:
      enabled: false
      replicaCount: 1

postgresql:
  enabled: true
  auth:
    username: authentik
    password: ""  # Will be set from secure secrets
    database: authentik
    existingSecret: "authentik-secrets"
    secretKeys:
      adminPasswordKey: "postgresql-password"
      userPasswordKey: "postgresql-password"
  primary:
    persistence:
      enabled: true
      size: 20Gi  # Increased for production OIDC usage
      storageClass: "local-path"  # Use local-path storage class
      accessModes:
        - ReadWriteOnce
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 256Mi

redis:
  enabled: true
  auth:
    enabled: false  # Disable Redis auth to match current deployment
    password: ""  # Will be set from secure secrets
    existingSecret: "authentik-secrets"
    existingSecretPasswordKey: "redis-password"
  master:
    persistence:
      enabled: true
      size: 4Gi  # Increased for session storage
      storageClass: "local-path"  # Use local-path storage class
      accessModes:
        - ReadWriteOnce
    resources:
      limits:
        cpu: 250m
        memory: 512Mi
      requests:
        cpu: 50m
        memory: 128Mi

# Persistent Volume for Authentik media files
persistence:
  enabled: true
  size: 5Gi
  storageClass: "local-path"  # Use local-path storage class
  accessMode: ReadWriteOnce
  mountPath: /media

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi

# Security context for production
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

# OIDC Integration with Kubernetes
kubernetes:
  oidc:
    enabled: true
    # These will be used to configure kube-apiserver
    issuerUrl: "https://auth.noah-infra.com/application/o/kubernetes/"
    clientId: "kubernetes-cluster"
    usernameClaim: "preferred_username"
    groupsClaim: "groups"
    signingAlgs: ["RS256"]

nodeSelector: {}
tolerations: []
affinity: {}

# Service Monitor for Prometheus (if available)
serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s
