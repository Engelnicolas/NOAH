replicaCount: 1

image:
  repository: ghcr.io/goauthentik/server
  tag: "2023.10.5"
  pullPolicy: IfNotPresent

worker:
  replicaCount: 1

service:
  type: LoadBalancer  # Change from ClusterIP to LoadBalancer for external access
  port: 9000
  annotations:
    # Use Cilium's LoadBalancer with external access
    service.cilium.io/global: "true"
    service.cilium.io/shared: "true"
    # Enable domain-based routing
    external-dns.alpha.kubernetes.io/hostname: "authentik.noah-infra.com"
    # Configure load balancing algorithm
    service.cilium.io/lb-algorithm: "round_robin"

ingress:
  enabled: false  # Currently using LoadBalancer for external access
  className: cilium  # Options: "nginx", "cilium", or "traefik"
  annotations:
    # Common annotations for all ingress controllers
    cert-manager.io/cluster-issuer: letsencrypt-prod
    # Nginx-specific (when className: nginx)
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    # Cilium-specific annotations are auto-added when className: cilium
  hosts:
    - host: authentik.noah-infra.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: authentik-tls
      hosts:
        - authentik.noah-infra.com

authentik:
  # Use our existing secret instead of auto-generating
  secret:
    existingSecret: "authentik-secrets"
    secretKey: "AUTHENTIK_SECRET_KEY"
  errorReporting:
    enabled: false
  logLevel: info
  email:
    host: smtp.noah-infra.com
    port: 587
    username: ""
    password: ""
    useTls: true
    useSSL: false
    from: authentik@noah-infra.com
  
  # Standalone IAM Configuration - No external LDAP integration
  bootstrap:
    enabled: true
    adminUser: "akadmin"
    adminEmail: "admin@noah-infra.com"
    
  outposts:
    ldap:
      enabled: false
      replicaCount: 1

postgresql:
  enabled: true
  auth:
    username: authentik
    password: ""  # Will be set from secure secrets
    database: authentik
    existingSecret: "authentik-secrets"
    secretKeys:
      adminPasswordKey: "postgresql-password"
      userPasswordKey: "postgresql-password"
  primary:
    persistence:
      enabled: true
      size: 8Gi

redis:
  enabled: true
  auth:
    enabled: true
    password: ""  # Will be set from secure secrets
    existingSecret: "authentik-secrets"
    existingSecretPasswordKey: "redis-password"
  master:
    persistence:
      enabled: true
      size: 2Gi

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi

nodeSelector: {}
tolerations: []
affinity: {}
